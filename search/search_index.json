{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Draughts Game Draughts is a strategy board game for two players which involve forward movements, it is played on an 8x8 checkerboard with 12 pieces each side, usually Black and white The pieces move and capture diagonally forward, until they reach the opposite end of the board, when they come here they are crowned as king and can thereafter move and capture both backward and forward. Rules Starting position Each player starts with 12 pieces on their side, with 3 rows of black and 3 rows of white pieces. The player with the black piece moves first, then turns alternate. Move Rules There are two different types of moves: Simple Move: It consists of a piece moving diagonally to an unoccupied dark square. Jump Move: A jump consists of moving a piece that is diagonally adjacent an opponent's piece, to an empty square immediately beyond it in the same direction (thus \"jumping over\" the opponent's piece front and back ). Men can jump diagonally forward only; kings can jump in any diagonal direction. A jumped piece is considered \"captured\" and removed from the game. Any piece, king or man, can jump a king. Multiple jumps are possible, if after one jump, another piece is immediately eligible to be jumped by the moved piece\u2014even if that jump is in a different diagonal direction. If more than one multi-jump is available, the player can choose which piece to jump with, and which sequence of jumps to make. The sequence chosen is not required to be the one that maximizes the number of jumps in the turn; however, a player must make all available jumps in the sequence chosen. Kings If a piece moves into the king's row on the opponent's side of the board, it is crowned as a king and gains the ability to move forward and backward. End of the game A player wins by capturing all of the opponent's pieces or by leaving the opponent with no legal move. The game is a draw if neither side can force a win, or by agreement (one side offering a draw, the other accepting). Game Implementation The game has been implemented in python, along with minimax algorithm for AI actions. It has been divided into two modules namely Draughts and Algorithms check Modules for more information.","title":"Home"},{"location":"#draughts","text":"","title":"Draughts"},{"location":"#game","text":"Draughts is a strategy board game for two players which involve forward movements, it is played on an 8x8 checkerboard with 12 pieces each side, usually Black and white The pieces move and capture diagonally forward, until they reach the opposite end of the board, when they come here they are crowned as king and can thereafter move and capture both backward and forward.","title":"Game"},{"location":"#rules","text":"","title":"Rules"},{"location":"#starting-position","text":"Each player starts with 12 pieces on their side, with 3 rows of black and 3 rows of white pieces. The player with the black piece moves first, then turns alternate.","title":"Starting position"},{"location":"#move-rules","text":"There are two different types of moves: Simple Move: It consists of a piece moving diagonally to an unoccupied dark square. Jump Move: A jump consists of moving a piece that is diagonally adjacent an opponent's piece, to an empty square immediately beyond it in the same direction (thus \"jumping over\" the opponent's piece front and back ). Men can jump diagonally forward only; kings can jump in any diagonal direction. A jumped piece is considered \"captured\" and removed from the game. Any piece, king or man, can jump a king. Multiple jumps are possible, if after one jump, another piece is immediately eligible to be jumped by the moved piece\u2014even if that jump is in a different diagonal direction. If more than one multi-jump is available, the player can choose which piece to jump with, and which sequence of jumps to make. The sequence chosen is not required to be the one that maximizes the number of jumps in the turn; however, a player must make all available jumps in the sequence chosen.","title":"Move Rules"},{"location":"#kings","text":"If a piece moves into the king's row on the opponent's side of the board, it is crowned as a king and gains the ability to move forward and backward.","title":"Kings"},{"location":"#end-of-the-game","text":"A player wins by capturing all of the opponent's pieces or by leaving the opponent with no legal move. The game is a draw if neither side can force a win, or by agreement (one side offering a draw, the other accepting).","title":"End of the game"},{"location":"#game-implementation","text":"The game has been implemented in python, along with minimax algorithm for AI actions. It has been divided into two modules namely Draughts and Algorithms check Modules for more information.","title":"Game Implementation"},{"location":"contributers/","text":"Contributers The Contributers for this project include VidhulaShree M A Renuka Likitha P Sanjay VidhulaShree M A Contributions: game.py Documentation Renuka Contributions: piece.py main.py Likitha Contributions: minimax.py, enums_and_constants.py P Sanjay Contributions: board.py Documentation Contributions Feel free to contribute to this repository, by forking and creating a pull request with the changes mentioned.","title":"Contributers"},{"location":"contributers/#contributers","text":"The Contributers for this project include VidhulaShree M A Renuka Likitha P Sanjay","title":"Contributers"},{"location":"contributers/#vidhulashree-m-a","text":"Contributions: game.py Documentation","title":"VidhulaShree M A"},{"location":"contributers/#renuka","text":"Contributions: piece.py main.py","title":"Renuka"},{"location":"contributers/#likitha","text":"Contributions: minimax.py, enums_and_constants.py","title":"Likitha"},{"location":"contributers/#p-sanjay","text":"Contributions: board.py Documentation","title":"P Sanjay"},{"location":"contributers/#contributions","text":"Feel free to contribute to this repository, by forking and creating a pull request with the changes mentioned.","title":"Contributions"},{"location":"modules/","text":"Modules The project consists of two modules namely Draughts and Algorithms Each of these modules play a significant role in the project. Draughts The draughts module is a complete implementation of the draughts (checkers) game built with Pygame. It provides a modular architecture separating concerns into board management, game logic, piece representation, and constants/enumerations. The module supports both human vs human and human vs AI gameplay with visual feedback for valid moves. The draughts module has the following 5 files init .py board.py enums_and_constants.py game.py piece.py The __init__.py file makes the directory into a package i.e. Draughts module. The board.py file contains the Board class which manages the board game state, piece positions, move validation, and game evaluation. The enums_and_constants.py file defines all the game constants, enumerations and other resources used in the game. The game.py file contains the Game class which orchestrates the gameplay, manages turns, handle user interactions, and coordinate between board and pieces. The piece.py file contains the Piece class that represents the individual pieces with their property and rendering logic. Algorithms This module provides the artificial intelligence engine for a draughts game, centered around the minimax algorithm for strategic move selection. It enables the computer opponent to think ahead multiple moves by simulating all possible game continuations and choosing the optimal path based on board evaluation scores. The file includes utilities for move simulation, optional visualization of the AI's thought process, and comprehensive move generation that considers all pieces and their valid moves while properly handling captures. The algorithms has minimax.py and init .py file. The __init__.py file makes the directory into a package i.e. Draughts module. The minimax.py file implements the AI logic for the draughts game using the minimax algorithm.","title":"Modules"},{"location":"modules/#modules","text":"The project consists of two modules namely Draughts and Algorithms Each of these modules play a significant role in the project.","title":"Modules"},{"location":"setup/","text":"Cloning the project The draughts project can be found in this reposititory If you have git cli installed locally then copy paste this git clone https://github.com/JestiferHarold/Draughts If not download the zip file from the code tab after downloading extract the zip file to your desired destination. Setting up the python virtual enviorment [!Warning] Skipping this step to directly install the packages will lead to conflicts with global packages, proceed with your caution. Now it's time to setup a virtual enviroment so that the packages we need to install here will not affect the global packages. First check if python has been downloaded python --version If the output shows anything other than the following Python 3.13.7 download and install python locally [!NOTE] If only the version is different then skip the downloading python. Go into the Project directory cd draughts (or) <any other directory name> after going into the project directory enter this python -m venv virutal_env (or) <any_other_name> If you are using linux based distro or macos type this command source <name_of_the_venv>/bin/activate If you are using windows enter .\\<name_of_the_venv>\\\\Scripts\\\\activate.bat If you get the name of the directory which hold the virutal enviroment like the picture below then HOORAYYY you have successfully activated the virtual enviroment. If not try doing these steps again. Downloading the required packages After activating the virtual enviroment, you need to install dependencies. To do that just enter the following command pip install -r dependencies.txt [!NOTE] The command is same for linux, macos and windows This downloads all the dependencies/packages required to run the project. Running the game Now the final and important step is to run the main.py, it is as simple as it sounds. Just enter this in your command promt (or) terminal. python main.py HOORAYY the project is now running with no issues. To configure the documentation The documentation is made using mkdocs which uses markdown to create webpages. This can be tinkered. You are free to change the documentation and create a pull request notifing the changes and the reason for those changes.","title":"Setup"},{"location":"setup/#cloning-the-project","text":"The draughts project can be found in this reposititory If you have git cli installed locally then copy paste this git clone https://github.com/JestiferHarold/Draughts If not download the zip file from the code tab after downloading extract the zip file to your desired destination.","title":"Cloning the project"},{"location":"setup/#setting-up-the-python-virtual-enviorment","text":"[!Warning] Skipping this step to directly install the packages will lead to conflicts with global packages, proceed with your caution. Now it's time to setup a virtual enviroment so that the packages we need to install here will not affect the global packages. First check if python has been downloaded python --version If the output shows anything other than the following Python 3.13.7 download and install python locally [!NOTE] If only the version is different then skip the downloading python. Go into the Project directory cd draughts (or) <any other directory name> after going into the project directory enter this python -m venv virutal_env (or) <any_other_name> If you are using linux based distro or macos type this command source <name_of_the_venv>/bin/activate If you are using windows enter .\\<name_of_the_venv>\\\\Scripts\\\\activate.bat If you get the name of the directory which hold the virutal enviroment like the picture below then HOORAYYY you have successfully activated the virtual enviroment. If not try doing these steps again.","title":"Setting up the python virtual enviorment"},{"location":"setup/#downloading-the-required-packages","text":"After activating the virtual enviroment, you need to install dependencies. To do that just enter the following command pip install -r dependencies.txt [!NOTE] The command is same for linux, macos and windows This downloads all the dependencies/packages required to run the project.","title":"Downloading the required packages"},{"location":"setup/#running-the-game","text":"Now the final and important step is to run the main.py, it is as simple as it sounds. Just enter this in your command promt (or) terminal. python main.py HOORAYY the project is now running with no issues.","title":"Running the game"},{"location":"setup/#to-configure-the-documentation","text":"The documentation is made using mkdocs which uses markdown to create webpages. This can be tinkered. You are free to change the documentation and create a pull request notifing the changes and the reason for those changes.","title":"To configure the documentation"},{"location":"timecomplexity/","text":"Time Complexity The time complexity of minimax for draughts (checkers) on an 8x8 board is O(b^d), where: b = branching factor (average number of legal moves per position) d = depth of the search tree Branching factor Approximately 2-8 moves per position on average, though this varies significantly: Early game: higher (around 7-10 moves) Mid game: moderate (around 3-7 moves) End game: lower (around 2-4 moves) Jump sequences can temporarily reduce branches Search depth The search depth in this implementation is 3 due to the number of branches needed to be checked.","title":"Time Complexity"},{"location":"timecomplexity/#time-complexity","text":"The time complexity of minimax for draughts (checkers) on an 8x8 board is O(b^d), where: b = branching factor (average number of legal moves per position) d = depth of the search tree","title":"Time Complexity"},{"location":"timecomplexity/#branching-factor","text":"Approximately 2-8 moves per position on average, though this varies significantly: Early game: higher (around 7-10 moves) Mid game: moderate (around 3-7 moves) End game: lower (around 2-4 moves) Jump sequences can temporarily reduce branches","title":"Branching factor"},{"location":"timecomplexity/#search-depth","text":"The search depth in this implementation is 3 due to the number of branches needed to be checked.","title":"Search depth"}]}